package com.student.utm;
import java.util.*;

public class ComplexPolynom
{
    private int[] coeff;
    private int deg;
    private ComplexPolynom(int n)
    {
        deg = n;
        coeff = new int[deg+1];
        for(int i = 0; i < deg+1; i++)
            coeff[i] = 0;
    }
    //Coeficientul nul
    private void inputCoeff()
    {
        Scanner in = new Scanner(System.in);
        System.out.println("Enter coefficient: ");
        for(int i = 0; i < deg+1; i++)
        {
            System.out.print("coeff[" + i + "] = ");
            coeff[i] = in.nextInt();
            System.out.println();
        }
    }
    private void setCoeff(int index, int x)
    {
        coeff[index] = x;
    }
    private int getCoeff(int index)
    {
        return coeff[index];
    }
    private int getDeg()
    {
        return deg;
    }
    //Intoarcem polinomul obtinut la sumarea coeficientilor
    private static ComplexPolynom sum(ComplexPolynom p1, ComplexPolynom p2)
    {
        int tempDeg;
        if(p1.getDeg() < p2.getDeg())
            tempDeg = p1.getDeg();
        else
            tempDeg = p2.getDeg();
        ComplexPolynom tempP = new ComplexPolynom(tempDeg);
        for(int i = 0; i < tempDeg+1; i++)
            tempP.setCoeff(i, p1.getCoeff(i) + p2.getCoeff(i));
        tempP.output();
        return tempP;
    }
    //intoarcem polinomul obtinul la diferenta coeficientilor
    private static ComplexPolynom difference(ComplexPolynom p1, ComplexPolynom p2)
    {
        int tempDeg;
        if(p1.getDeg() > p2.getDeg())
            tempDeg = p1.getDeg();
        else
            tempDeg = p2.getDeg();
        ComplexPolynom tempP = new ComplexPolynom(tempDeg);
        for(int i = 0; i < tempDeg+1; i++)
            tempP.setCoeff(i, p1.getCoeff(i) - p2.getCoeff(i));
        tempP.output();
        return tempP;
    }

    //Afisam polinomul primit la inmultire
    private static ComplexPolynom multiply(ComplexPolynom p1, ComplexPolynom p2)
    {
        int tempDeg = p1.getDeg()+p2.getDeg();
        ComplexPolynom tempP = new ComplexPolynom(tempDeg);
        for(int i = 0; i < p1.getDeg()+1; i++)
            for (int j = 0; j < p2.getDeg()+1; j++)
                tempP.setCoeff(i + j, tempP.getCoeff(i + j) + p1.getCoeff(i) * p2.getCoeff(j));
        tempP.output();
        return tempP;//clone
    }
    //Metoda pentru initializarea polinomului
    private static ComplexPolynom inputPolynom()
    {
        Scanner in = new Scanner(System.in);
        System.out.print("Introduceti gradul polinomului : ");
        int degP = in.nextInt();
        ComplexPolynom p = new ComplexPolynom(degP);
        p.inputCoeff();
        p.output();
        return p;
    }
    //Afisarea polinomului
    private void output()
    {
        for(int i = 0; i < deg+1; i++)
        {
            System.out.printf("%di*X(%d)", coeff[i], i);
            if(i < deg)
                System.out.print("+");
        }
        System.out.println();
    }

    public static void main(String[] args)
    {
        int choose = 0;
        ComplexPolynom p1 = null, p2 = null, pResult = null;
        Scanner in = new Scanner(System.in);
        do{
            System.out.println("1. Enter polynom grade");
            System.out.println("2. Get Sum");
            System.out.println("3. Get Difference ");
            System.out.println("4. Get Multiply");
            System.out.println("5. Get Polynoms");
            System.out.println("6. Exit");
            System.out.print("Enter number of menu: ");
            choose = in.nextInt();
            switch(choose)
            {
                case 1:
                    System.out.println("Polynom p1.");
                    p1 = inputPolynom();
                    System.out.println("Polynom p2.");
                    p2 = inputPolynom();
                    break;
                case 2:
                    pResult = sum(p1, p2);
                    break;
                case 3:
                    pResult = difference(p1, p2);
                    break;
                case 4:
                    pResult = multiply(p1, p2);
                    break;
                case 5:
                    System.out.println("Polynom p1.");
                    p1.output();
                    System.out.println("Polynom p2.");
                    p2.output();
                    break;
                case 6:
                    System.exit(0);
                    break;
                default:
                    System.out.println("Wrong Input. Try Again.");
            }
        }while(true);
    }
}

In urma aceste lucrari de laborator am creat clasa ComplexPolynom care sumeaza,inmultiste si imparteste doi polinomi, deasemenea am utilizat in laborator si polimorfismul.